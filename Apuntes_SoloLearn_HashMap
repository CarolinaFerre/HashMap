
HashMap
_______


Los arreglos y listas almacenan elementos en colecciones ordenadas, con un entero utilizando con cada elemento como índice.

Los HashMap son utilizados para almacenar colecciones de datos como pares de clave y valor. 
Un objeto es utilizado como una clave (índice) para otro objeto(el valor).

Los métodos put,remove y get son utilizados para añadir, borrar y acceder a los valores en el HaspMap.

import java.util.HashMap;

public class MyClass{
  public static void main(String []args){
    HashMap<String,Integer>points=new HashMap<String,Integer>();
    
    points.put("Amy",154);
    points.put("Dave",42);
    points.put("Rob,733);
    System.out.println.get("Dave");
    }
   }
   
   
   Hemos creado un HashMap con Strings como sus claves y Enteros como sus valores.
   
   Utiliza el método get y la clave correspondiente para acceder a los elementos del HashMap.
   
   
   ejemplo: ¿Cuál es la salida de este código?
   
   import java.util.HashMap;
   
   class A{
    public static void main(String[]args){
      HashMap<String,String> m= new HashMap<String,String>();
      
      m.put("A","FIRST");
      m.put("B","SECOND");
      m.put("C","THRID");
      
      System.out.println(m.get("B"));
      
     }
    }
    
    La salida es SECOND.
    
    
    
    Un HashMap no puede contener claves duplicadas.Añadir un nuevo elemento con una clave que ya existe sobreescribe el elemento anterior.
    
    La clase HashMap provee los métodos containsKet y containsValue para determinar la presencia de una clave o valor específico, respectivamente.
    
    SI intentas obtener un valor que no está presente en tu mapa, retornará un valor null.
    
    Null es un tipo especial que representa la ausencia de valor.
    
    
    ejemplo:
    
    HashMap<String,sTRING> M= NEW hASHmAP<sTRING,sTRING>();
    
    m.put("A","FIRST");
    m.put("B","SECOND");
    
    System.out.println(m.get("B"));
    
    
